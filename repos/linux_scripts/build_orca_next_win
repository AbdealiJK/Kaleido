#!/bin/bash
# docker run -it -v /media/jmmease/SSD1/chromium_build/repos/:/repos  jonmmease/chromium-builder:0.5 /repos/build_headless

cd /repos/src

# Run vs_toolchain.py to create the fuse mount at
# src/third_party/depot_tools/win_toolchain/vs_files
vpython build/vs_toolchain.py update --force

# Make output directory
mkdir -p out/Headless_win

# Write out/Headless_win/args.gn
echo "
# Copied windows compatible options from //build/args/headless.gn
# Embed resource.pak into binary to simplify deployment.
headless_use_embedded_resources = true

# Use embedded data instead external files for headless in order
# to simplify deployment.
v8_use_external_startup_data = false

enable_nacl = false
enable_remoting = false

# cross compile
target_os=\"win\"
target_cpu=\"x64\"

# Debug / symbols
symbol_level=0
blink_symbol_level=0
is_debug=false
is_component_build=false
" > out/Headless_win/args.gn

# 1) Reset headless/BUILD.gn
git checkout HEAD -- headless/BUILD.gn

# 2) Append orca_next section to headless build file (src/headless/BUILD.gn)
echo "
executable(\"orca_next\") {
  sources = [ \"app/orca_next.cc\" ]

  deps = [
    \":headless_shell_lib\",
    \"//skia\",  # we need this to override font render hinting in headless build
  ]
}" >> headless/BUILD.gn

# 3) Copy orca_next/orca_next.cc to src/headless/app/orca_next.cc
rm -rf headless/app/plugins
cp -r ../orca_next/cc/* headless/app/

# 4) Perform build, result will be out/Headless_win/orca_next
gn gen out/Headless_win
ninja -C out/Headless_win -j 20 orca_next

# 5) Copy build files
mkdir -p ../build/orca_next_win/
rm -r ../build/orca_next_win/*
cp out/Headless_win/orca_next.exe ../build/orca_next_win/
cp -r out/Headless_win/swiftshader/ ../build/orca_next_win/
# 
# copy shared libraries
# mkdir -p ../build/orca_next_win/lib/
# 
# /usr/lib/x86_64-linux-gnu/
# for SO_FILE in libnss3.so libnssutil3.so libnspr4.so libplc4.so libplds4.so libsqlite3.so.0
# do
#   cp /usr/lib/x86_64-linux-gnu/$SO_FILE ../build/orca_next_win/lib/$SO_FILE
# done
# 
# /usr/lib/x86_64-linux-gnu/nss
# cp -r /usr/lib/x86_64-linux-gnu/nss ../build/orca_next_win/lib/
# cp /usr/lib/x86_64-linux-gnu/nss/* ../build/orca_next_win/lib/
# 
# /lib/x86_64-linux-gnu/
# for SO_FILE in libexpat.so.1 # libdl.so.2 libpthread.so.0 librt.so.1 libm.so.6 libgcc_s.so.1 libc.so.6
# do
#   cp /lib/x86_64-linux-gnu/$SO_FILE ../build/orca_next_win/lib/$SO_FILE
# done
# 
# fonts
# mkdir -p ../build/orca_next_win/etc/
# cp -r /etc/fonts/ ../build/orca_next_win/etc/fonts
# mkdir -p ../build/orca_next_win/xdg
# cp -r /usr/share/fonts/ ../build/orca_next_win/xdg/
# 
# launch script
# echo "#!/bin/bash
# dir_path=\$(dirname \$(readlink -f \$0))
# 
# export LD_LIBRARY_PATH=\$dir_path/lib:\$LD_LIBRARY_PATH
# export FONTCONFIG_PATH=\$dir_path/etc/fonts
# export XDG_DATA_HOME=\$dir_path/xdg
# 
# cd \$dir_path
# ./bin/orca_next --no-sandbox --disable-gpu --allow-file-access-from-files --disable-breakpad \$@
# " > ../build/orca_next_win/orca_next
# chmod +x ../build/orca_next_win/orca_next

# Copy icudtl.dat
cp ./out/Headless_win/icudtl.dat ../build/orca_next_win/

# Copy javascript
pushd ../orca_next/js/
mkdir -p build/
npm install
./node_modules/browserify/bin/cmd.js --s orca_next src/component/plotly-graph/index.js > build/bundle.js
popd

mkdir -p ../build/orca_next_win/js/
cp ../orca_next/js/build/bundle.js ../build/orca_next_win/js/
